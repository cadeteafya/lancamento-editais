name: Scrape & Deploy (Estratégia MED)

on:
  # roda a cada 20 minutos (UTC); um guard abaixo filtra a janela BR
  schedule:
    - cron: "*/20 * * * *"
  workflow_dispatch: {}
  push:
    paths:
      - "scraper.py"
      - ".github/workflows/scrape.yml"

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  scrape_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Guarda: só segue em seg–sex, 06:30–18:30 (horário de Brasília)
      - name: Guard (Mon–Fri, 06:30–18:30 BRT)
        id: guard
        run: |
          set -e
          TZ=America/Sao_Paulo
          DOW=$(date +"%u")                # 1..7 (Mon..Sun)
          H=$(date +"%H")
          M=$(date +"%M")
          MINUTES=$((10#$H*60 + 10#$M))    # minutos desde 00:00
          START=$((6*60+30))               # 06:30 => 390
          END=$((18*60+30))                # 18:30 => 1110

          if [ "$DOW" -ge 6 ]; then
            echo "outside_window=true" >> $GITHUB_OUTPUT
            echo "Hoje é sábado/domingo (BR). Saindo."
            exit 0
          fi

          if [ "$MINUTES" -lt "$START" ] || [ "$MINUTES" -gt "$END" ]; then
            echo "outside_window=true" >> $GITHUB_OUTPUT
            echo "Fora da janela 06:30–18:30 BRT. Saindo."
            exit 0
          fi

          echo "outside_window=false" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set up Python 3.11
        if: steps.guard.outputs.outside_window == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (Tesseract + pip)
        if: steps.guard.outputs.outside_window == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-por
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 "lxml==5.3.0" pillow pytesseract opencv-python-headless

      - name: Run scraper
        if: steps.guard.outputs.outside_window == 'false'
        run: |
          set -e
          python scraper.py
          echo "---- HEAD data/editais.json ----"
          head -c 1500 data/editais.json || true
          echo

      # Compara com o commit anterior e identifica novos itens
      - name: Compute new items
        if: steps.guard.outputs.outside_window == 'false'
        id: diff
        run: |
          set -e
          CUR="data/editais.json"
          PREV=".prev_editais.json"

          if git rev-parse HEAD~1 >/dev/null 2>&1 && git show HEAD~1:${CUR} >/dev/null 2>&1; then
            git show HEAD~1:${CUR} > "$PREV" || echo "[]" > "$PREV"
          else
            echo "[]" > "$PREV"
          fi

          python - <<'PY'
          import json, os
          from urllib.parse import quote

          with open("data/editais.json","r",encoding="utf-8") as f:
              cur = json.load(f)
          with open(".prev_editais.json","r",encoding="utf-8") as f:
              prev = json.load(f)

          prev_links = { x.get("link") for x in prev if isinstance(x,dict) }
          new = [x for x in cur if isinstance(x,dict) and x.get("link") not in prev_links]

          payload = []
          for x in new[:5]:
              nome = (x.get("instituicao") or x.get("nome") or "").strip()
              slug = x.get("slug")
              site = f"https://cadeteafya.github.io/lancamento-editais/edital.html?slug={quote(slug)}" if slug else (x.get("link") or "")
              payload.append({"nome": nome, "site": site})

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as out:
              out.write(f"count={len(new)}\n")
              out.write("items="+json.dumps(payload, ensure_ascii=False)+"\n")
          PY

      - name: Notify Teams (new items)
        if: steps.guard.outputs.outside_window == 'false' && steps.diff.outputs.count != '0'
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          ITEMS_JSON: ${{ steps.diff.outputs.items }}
        run: |
          python - << 'PY'
          import json, os, requests
          hook = os.environ.get("TEAMS_WEBHOOK_URL","").strip()
          if not hook:
            print("Sem TEAMS_WEBHOOK_URL; pulando.")
            raise SystemExit(0)

          items = json.loads(os.environ.get("ITEMS_JSON","[]"))
          for it in items:
            titulo = it.get("nome") or "Novo edital"
            link   = it.get("site") or ""
            payload = {
              "@type": "MessageCard",
              "@context": "https://schema.org/extensions",
              "summary": "Alerta de novo edital",
              "themeColor": "00A884",
              "title": "EM TESTE: Alerta de novo edital!",
              "text": f"**{titulo}**: [{link}]({link})"
            }
            r = requests.post(hook, json=payload, timeout=30)
            r.raise_for_status()
          print(f"Enviado {len(items)} alerta(s) ao Teams.")
          PY

      - name: Commit data if changed
        if: steps.guard.outputs.outside_window == 'false'
        env:
          GH_EMAIL: "${{ github.actor }}@users.noreply.github.com"
          GH_NAME:  "${{ github.actor }}"
        run: |
          set -euo pipefail

          echo "Status:"
          git status --porcelain || true

          if git diff --quiet -- data/editais.json; then
            echo "No changes to commit."
            exit 0
          fi

          git config user.email "$GH_EMAIL"
          git config user.name  "$GH_NAME"

          git add data/editais.json
          git commit -m "chore: update data/editais.json"

          # protege contra non-fast-forward
          git pull --rebase
          git push

      - name: Upload artifact (site)
        if: steps.guard.outputs.outside_window == 'false'
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        if: steps.guard.outputs.outside_window == 'false'
        uses: actions/deploy-pages@v4
