name: Scrape & Deploy (Estratégia MED)

on:
  # agenda diária (07:30 BRT ≈ 10:30 UTC)
  schedule:
    - cron: "30 10 * * *"
  # botão "Run workflow"
  workflow_dispatch: {}
  # re-rodar quando o scraper/fluxo mudar
  push:
    paths:
      - "scraper.py"
      - ".github/workflows/scrape.yml"

permissions:
  contents: write     # para commitar data/*.json
  pages: write
  id-token: write

jobs:
  scrape_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Dependências do scraper (Tesseract + libs Python)
      - name: Install deps (requests, bs4, lxml, OCR stack)
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-por
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 "lxml==5.3.0" pillow pytesseract opencv-python-headless

      - name: Run scraper
        run: python scraper.py

      # ---------- ALERTA TEAMS: evitar repetição ----------
      # Carrega lista já notificada do commit anterior (ou cria vazia)
      - name: Load notified state
        run: |
          mkdir -p data
          if git rev-parse HEAD~1 >/dev/null 2>&1 && git show HEAD~1:data/notified.json >/dev/null 2>&1; then
            git show HEAD~1:data/notified.json > data/notified.json || echo "[]" > data/notified.json
          else
            echo "[]" > data/notified.json
          fi

      # Monta a fila de notificações (somente links ainda não notificados)
      - name: Build notifications
        id: notif
        run: |
          python - << 'PY'
          import json, os, urllib.parse
          from pathlib import Path

          cur  = json.loads(Path("data/editais.json").read_text(encoding="utf-8"))
          try:
            notified = set(json.loads(Path("data/notified.json").read_text(encoding="utf-8")))
          except Exception:
            notified = set()

          to_notify = []
          for x in cur:
              link = x.get("link")
              if not link or link in notified:
                  continue
              nome = (x.get("instituicao") or x.get("nome") or "").strip()
              slug = x.get("slug")
              site = f"https://cadeteafya.github.io/lancamento-editais/edital.html?slug={urllib.parse.quote(slug)}" if slug else x.get("link")
              to_notify.append({"link": link, "nome": nome, "site": site})

          Path("to_notify.json").write_text(json.dumps(to_notify, ensure_ascii=False), encoding="utf-8")

          # exporta count para próximos steps (sem set-output)
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
              f.write(f"count={len(to_notify)}\n")
          PY

      # Envia 1 cartão por item novo ao Microsoft Teams (Incoming Webhook)
      - name: Notify Teams (new only)
        if: steps.notif.outputs.count != '0'
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          python - << 'PY'
          import json, os, requests
          items = json.loads(open("to_notify.json","r",encoding="utf-8").read())
          hook  = os.environ["TEAMS_WEBHOOK_URL"]

          for it in items:
              nome = it.get("nome") or "Novo edital"
              site = it.get("site")
              # O365 Connector Card (Incoming Webhook)
              payload = {
                "@type": "MessageCard",
                "@context": "https://schema.org/extensions",
                "summary": "Alerta de novo edital",
                "themeColor": "00A884",
                "title": "EM TESTE: Alerta de novo edital!",
                "text": f"'**{nome}**': '{site}'"
              }
              r = requests.post(hook, json=payload, timeout=30)
              r.raise_for_status()
          print(f"Enviado {len(items)} alerta(s) ao Teams.")
          PY

      # Atualiza o estado de notificados
      - name: Update notified state
        if: steps.notif.outputs.count != '0'
        run: |
          python - << 'PY'
          import json
          from pathlib import Path
          try:
            notified = set(json.loads(Path("data/notified.json").read_text(encoding="utf-8")))
          except Exception:
            notified = set()
          for it in json.loads(Path("to_notify.json").read_text(encoding="utf-8")):
            notified.add(it["link"])
          Path("data/notified.json").write_text(json.dumps(sorted(notified), ensure_ascii=False, indent=2), encoding="utf-8")
          PY

      # Commita dados e estado (mantém histórico + evita alertas repetidos)
      - name: Commit data & notified if changed
        run: |
          if [[ -n "$(git status --porcelain -- data/editais.json data/notified.json)" ]]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add data/editais.json data/notified.json
            git commit -m "chore: update data (editais/notified)"
            git push
          else
            echo "No changes to commit."
          fi

      # Mostra um pedaço do JSON (debug rápido no log)
      - name: Show JSON head
        run: |
          echo "----- data/editais.json (first 1200 chars) -----"
          head -c 1200 data/editais.json || true
          echo

      # Publica SEMPRE o artefato atual para Pages
      - name: Upload artifact (site)
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
