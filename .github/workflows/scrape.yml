name: Scrape & Deploy (Estratégia MED)

on:
  # agenda diária (07:30 BRT ≈ 10:30 UTC)
  schedule:
    - cron: "30 10 * * *"
  # botão "Run workflow"
  workflow_dispatch: {}
  # re-rodar quando o scraper mudar
  push:
    paths:
      - "scraper.py"
      - ".github/workflows/scrape.yml"

permissions:
  contents: write   # (caso você queira commitar arquivos no futuro)
  pages: write
  id-token: write

jobs:
  scrape_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Dependências: Tesseract + idioma PT-BR, e libs Python
      - name: Install deps (requests, bs4, lxml, OCR stack)
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-por
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 "lxml==5.3.0" pillow pytesseract opencv-python-headless

      - name: Run scraper
        run: python scraper.py

      # 1) Descobrir itens novos comparando com o commit anterior
      - name: Diff new items
        id: diff
        run: |
          set -e
          # carrega atual
          CUR="data/editais.json"
          # tenta obter o JSON anterior do commit HEAD (se não existir, considera vazio)
          if git rev-parse HEAD~1 >/dev/null 2>&1 && git show HEAD~1:${CUR} >/dev/null 2>&1; then
            git show HEAD~1:${CUR} > .prev_editais.json || echo "[]">.prev_editais.json
          else
            echo "[]">.prev_editais.json
          fi

          python - << 'PY'
          import json, sys
          from urllib.parse import quote
          # lê atual e anterior
          cur = json.load(open("data/editais.json", "r", encoding="utf-8"))
          prev = json.load(open(".prev_editais.json", "r", encoding="utf-8"))
          prev_links = { x.get("link") for x in prev if isinstance(x, dict) }
          # novos por link
          new_items = [x for x in cur if isinstance(x, dict) and x.get("link") not in prev_links]
          # ordena por captured_at desc (se houver)
          new_items.sort(key=lambda x: x.get("captured_at",""), reverse=True)
          # prepara payload enxuto (até 5 por segurança)
          slim = []
          for x in new_items[:5]:
            nome_inst = (x.get("instituicao") or x.get("nome") or "").strip()
            slug = x.get("slug")
            site = f"https://cadeteafya.github.io/lancamento-editais/edital.html?slug={quote(slug)}" if slug else x.get("link")
            slim.append({"nome": nome_inst, "site": site})
          print(f"Novos: {len(new_items)}")
          # expõe para os próximos steps
          print(f"::set-output name=count::{len(new_items)}")
          print("::set-output name=json::" + json.dumps(slim, ensure_ascii=False))
          PY

      # 2) Enviar alerta para o Microsoft Teams (1 cartão por item novo)
      - name: Notify Teams (for each new item)
        if: steps.diff.outputs.count != '0'
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          ITEMS_JSON: ${{ steps.diff.outputs.json }}
        run: |
          python - << 'PY'
          import json, os, sys, requests
          hook = os.environ["TEAMS_WEBHOOK_URL"]
          items = json.loads(os.environ["ITEMS_JSON"] or "[]")

          # formata e envia um card por item
          for it in items:
            titulo = it.get("nome") or "Novo edital"
            link   = it.get("site")
            # payload no formato "connector card" do Teams
            payload = {
              "@type": "MessageCard",
              "@context": "https://schema.org/extensions",
              "summary": "Alerta de novo edital",
              "themeColor": "00A884",
              "title": "EM TESTE: Alerta de novo edital!",
              "text": f"**{titulo}**: [{link}]({link})"
            }
            r = requests.post(hook, json=payload, timeout=30)
            r.raise_for_status()
          print(f"Enviado {len(items)} alerta(s) ao Teams.")
          PY


      - name: Commit data if changed
        run: |
          if [[ -n "$(git status --porcelain -- data/editais.json)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add data/editais.json
            git commit -m "chore: update data/editais.json"
            git push
          else
            echo "No changes to commit."
          fi
          
      # Mostrar um pedaço do JSON gerado (útil para debug)
      - name: Show JSON head
        run: |
          echo "----- data/editais.json (first 1200 chars) -----"
          head -c 1200 data/editais.json || true
          echo

      # Publica SEMPRE o artefato atual para Pages
      - name: Upload artifact (site)
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4


